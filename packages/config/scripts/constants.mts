/// <reference types="bun" />

import { join } from "node:path";

const constants = JSON.parse(await Bun.stdin.text());

const pklSource = "./src/master.pkl";
const rawPklLines = (await Bun.file(pklSource).text()).split("\n");

// Figure out if the provided `line` has a line before it that starts with `//` or `#`. If so, return it.
// If not, return undefined; the resulting value can be used as a comment in generated code.
function findComment(varName: string): string | undefined {
	const index = rawPklLines.findIndex((line) => line.includes(`${varName} =`));
	if (index === 0) return undefined;
	const previousLine = rawPklLines[index - 1];
	if (
		previousLine &&
		(previousLine.startsWith("//") || previousLine.startsWith("#"))
	) {
		// remove prefix of `// ` or `# ` and return, careful to remove whether there is a space or not, and
		// then we trim the final result.
		return previousLine.slice(2).trim();
	}
	return undefined;
}

function generateTsConstants(): string {
	let data = `// This file is generated by the build process. Do not edit it directly. See 'master.pkl'.\n`;

	for (const [key, value] of Object.entries(constants)) {
		const comment = findComment(key);
		if (comment) {
			data += `\n// ${comment}\n`;
		}
		data += `export const ${key} = ${JSON.stringify(value)};\n`;
	}
	return data;
}

async function writeTsConstants(): Promise<void> {
	const file = join("src", "typescript", "index.mts");
	const abspath = join(process.cwd(), file);
	const data = generateTsConstants();
	console.info(`Writing constants at path '${abspath}'...`);
	await Bun.write(abspath, data);
	console.info("Configuration constants ready.");
}

await writeTsConstants();
